{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/alexeiaccio/Github/next-ts/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n query pageQuery($uid: String!, $lang: String!) {\\n  page(uid: $uid, lang: $lang) {\\n    title\\n    body {\\n      ...on PageBodyWorks {\\n        fields {\\n          work {\\n            __typename\\n            ...on Work {\\n              title\\n              theme\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// import { useQuery } from '@apollo/react-hooks'\n// import { NetworkStatus } from 'apollo-client'\nimport gql from 'graphql-tag';\nimport { get } from 'lodash'; // import { RichText } from 'prismic-reactjs';\n\nimport { withApollo } from '../lib/apollo';\nimport Header from '../components/header';\nexport var PAGE_QUERY = gql(_templateObject());\n\nvar Index = function Index(_ref) {\n  var _ref$title = _ref.title,\n      title = _ref$title === void 0 ? '' : _ref$title,\n      _ref$body = _ref.body,\n      body = _ref$body === void 0 ? [] : _ref$body;\n  // const { data } = useQuery(ABOUT_QUERY)\n  // const title = get(data, 'allAbouts.edges.0.node.title.0.text', '') as string;\n  console.log(body);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, title), body.map(function (item) {\n    if (item.__typename === 'PageBodyWorks') {\n      return __jsx(\"div\", {\n        key: get(item, 'fields.0.work.theme'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, get(item, 'fields.0.work.title.text'));\n    }\n  }));\n};\n\nIndex.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref2) {\n    var apolloClient, _ref4, data, title, body;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apolloClient = _ref2.apolloClient;\n            _context.next = 3;\n            return apolloClient.query({\n              query: PAGE_QUERY,\n              variables: {\n                uid: 'index',\n                lang: 'ru'\n              }\n            });\n\n          case 3:\n            _ref4 = _context.sent;\n            data = _ref4.data;\n            title = get(data, 'page.title.0.text', '');\n            body = get(data, 'page.body', []);\n            return _context.abrupt(\"return\", {\n              title: title,\n              body: body\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default withApollo(Index);","map":{"version":3,"sources":["/Users/alexeiaccio/Github/next-ts/pages/index.tsx"],"names":["gql","get","withApollo","Header","PAGE_QUERY","Index","title","body","console","log","map","item","__typename","getInitialProps","apolloClient","query","variables","uid","lang","data"],"mappings":";;;;;;;;;;;;;;;;;AACA;AACA;AACA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,GAAT,QAAoB,QAApB,C,CACA;;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,OAAO,IAAMC,UAAU,GAAGJ,GAAH,mBAAhB;;AAqBP,IAAMK,KAAgD,GAAG,SAAnDA,KAAmD,OAA+B;AAAA,wBAA5BC,KAA4B;AAAA,MAA5BA,KAA4B,2BAApB,EAAoB;AAAA,uBAAhBC,IAAgB;AAAA,MAAhBA,IAAgB,0BAAT,EAAS;AACtF;AAEA;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAL,CAFK,EAGJC,IAAI,CAACG,GAAL,CAAS,UAAAC,IAAI,EAAI;AAChB,QAAIA,IAAI,CAACC,UAAL,KAAoB,eAAxB,EAAyC;AACvC,aAAO;AAAK,QAAA,GAAG,EAAEX,GAAG,CAACU,IAAD,EAAO,qBAAP,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJV,GAAG,CAACU,IAAD,EAAO,0BAAP,CADC,CAAP;AAGD;AACF,GANA,CAHI,CAAP;AAWD,CAjBD;;AAmBAN,KAAK,CAACQ,eAAN;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,YAAT,SAASA,YAAT;AAAA;AAAA,mBACCA,YAAY,CAACC,KAAb,CAAmB;AACxCA,cAAAA,KAAK,EAAEX,UADiC;AAExCY,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,GAAG,EAAE,OAAP;AAAgBC,gBAAAA,IAAI,EAAE;AAAtB;AAF6B,aAAnB,CADD;;AAAA;AAAA;AACdC,YAAAA,IADc,SACdA,IADc;AAMhBb,YAAAA,KANgB,GAMRL,GAAG,CAACkB,IAAD,EAAO,mBAAP,EAA4B,EAA5B,CANK;AAOhBZ,YAAAA,IAPgB,GAOTN,GAAG,CAACkB,IAAD,EAAO,WAAP,EAAoB,EAApB,CAPM;AAAA,6CASf;AAAEb,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,IAAI,EAAJA;AAAT,aATe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAYA,eAAeL,UAAU,CAACG,KAAD,CAAzB","sourcesContent":["import { NextPage } from 'next';\n// import { useQuery } from '@apollo/react-hooks'\n// import { NetworkStatus } from 'apollo-client'\nimport gql from 'graphql-tag'\nimport { get } from 'lodash';\n// import { RichText } from 'prismic-reactjs';\n\nimport { withApollo } from '../lib/apollo';\nimport Header from '../components/header';\n\nexport const PAGE_QUERY = gql`\n query pageQuery($uid: String!, $lang: String!) {\n  page(uid: $uid, lang: $lang) {\n    title\n    body {\n      ...on PageBodyWorks {\n        fields {\n          work {\n            __typename\n            ...on Work {\n              title\n              theme\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst Index: NextPage<{ title?: string, body: any[] }> = ({ title = '', body = [] }) => {\n  // const { data } = useQuery(ABOUT_QUERY)\n\n  // const title = get(data, 'allAbouts.edges.0.node.title.0.text', '') as string;\n\n  console.log(body)\n  return <div>\n    <Header />\n    <h1>{title}</h1>\n    {body.map(item => {\n      if (item.__typename === 'PageBodyWorks') {\n        return <div key={get(item, 'fields.0.work.theme')}>\n          {get(item, 'fields.0.work.title.text')}\n        </div>\n      }\n    })}\n  </div>;\n};\n\nIndex.getInitialProps = async ({ apolloClient }: any) => {\n  const { data } = await apolloClient.query({\n    query: PAGE_QUERY,\n    variables: { uid: 'index', lang: 'ru' }\n  })\n\n  const title = get(data, 'page.title.0.text', '') as string;\n  const body = get(data, 'page.body', []) as any[];\n\n  return { title, body };\n};\n\nexport default withApollo(Index);"]},"metadata":{},"sourceType":"module"}