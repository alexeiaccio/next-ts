{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/alexeiaccio/Github/next-ts/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n query pageQuery($uid: String!, $lang: String!) {\\n  page(uid: $uid, lang: $lang) {\\n    title\\n    body {\\n      ...on PageBodyWorks {\\n        fields {\\n          work {\\n            __typename\\n            ...on Work {\\n              title\\n              theme\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// import { useQuery } from '@apollo/react-hooks'\n// import { NetworkStatus } from 'apollo-client'\nimport gql from 'graphql-tag';\nimport { get } from 'lodash'; // import { RichText } from 'prismic-reactjs';\n\nimport { withApollo } from '../lib/apollo';\nimport Header from '../components/header';\nexport var PAGE_QUERY = gql(_templateObject());\n\nvar Index = function Index(_ref) {\n  var _ref$title = _ref.title,\n      title = _ref$title === void 0 ? '' : _ref$title,\n      _ref$body = _ref.body,\n      body = _ref$body === void 0 ? [] : _ref$body;\n  // const { data } = useQuery(ABOUT_QUERY)\n  // const title = get(data, 'allAbouts.edges.0.node.title.0.text', '') as string;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, title), body.map(function (_ref2) {\n    var fields = _ref2.fields;\n    fields.map(function (_ref3) {\n      var work = _ref3.work,\n          __typename = _ref3.__typename;\n\n      if (__typename === 'PageBodyWorksFields') {\n        console.log(work);\n        return __jsx(\"div\", {\n          key: get(work, 'theme'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, get(work, 'title.text'));\n      }\n    });\n  }));\n};\n\nIndex.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref4) {\n    var apolloClient, _ref6, data, title, body;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apolloClient = _ref4.apolloClient;\n            _context.next = 3;\n            return apolloClient.query({\n              query: PAGE_QUERY,\n              variables: {\n                uid: 'index',\n                lang: 'ru'\n              }\n            });\n\n          case 3:\n            _ref6 = _context.sent;\n            data = _ref6.data;\n            title = get(data, 'page.title.0.text', '');\n            body = get(data, 'page.body', []);\n            return _context.abrupt(\"return\", {\n              title: title,\n              body: body\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nexport default withApollo(Index);","map":{"version":3,"sources":["/Users/alexeiaccio/Github/next-ts/pages/index.tsx"],"names":["gql","get","withApollo","Header","PAGE_QUERY","Index","title","body","map","fields","work","__typename","console","log","getInitialProps","apolloClient","query","variables","uid","lang","data"],"mappings":";;;;;;;;;;;;;;;;;AACA;AACA;AACA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,GAAT,QAAoB,QAApB,C,CACA;;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,OAAO,IAAMC,UAAU,GAAGJ,GAAH,mBAAhB;;AAqBP,IAAMK,KAAgD,GAAG,SAAnDA,KAAmD,OAA+B;AAAA,wBAA5BC,KAA4B;AAAA,MAA5BA,KAA4B,2BAApB,EAAoB;AAAA,uBAAhBC,IAAgB;AAAA,MAAhBA,IAAgB,0BAAT,EAAS;AACtF;AAEA;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAL,CAFK,EAGJC,IAAI,CAACC,GAAL,CAAS,iBAAgB;AAAA,QAAbC,MAAa,SAAbA,MAAa;AACxBA,IAAAA,MAAM,CAACD,GAAP,CAAW,iBAAgE;AAAA,UAA7DE,IAA6D,SAA7DA,IAA6D;AAAA,UAAvDC,UAAuD,SAAvDA,UAAuD;;AACzE,UAAIA,UAAU,KAAK,qBAAnB,EAA0C;AACxCC,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,eAAO;AAAK,UAAA,GAAG,EAAET,GAAG,CAACS,IAAD,EAAO,OAAP,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACJT,GAAG,CAACS,IAAD,EAAO,YAAP,CADC,CAAP;AAGD;AACF,KAPD;AAQD,GATA,CAHI,CAAP;AAcD,CAnBD;;AAqBAL,KAAK,CAACS,eAAN;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,YAAT,SAASA,YAAT;AAAA;AAAA,mBACCA,YAAY,CAACC,KAAb,CAAmB;AACxCA,cAAAA,KAAK,EAAEZ,UADiC;AAExCa,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,GAAG,EAAE,OAAP;AAAgBC,gBAAAA,IAAI,EAAE;AAAtB;AAF6B,aAAnB,CADD;;AAAA;AAAA;AACdC,YAAAA,IADc,SACdA,IADc;AAMhBd,YAAAA,KANgB,GAMRL,GAAG,CAACmB,IAAD,EAAO,mBAAP,EAA4B,EAA5B,CANK;AAOhBb,YAAAA,IAPgB,GAOTN,GAAG,CAACmB,IAAD,EAAO,WAAP,EAAoB,EAApB,CAPM;AAAA,6CASf;AAAEd,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,IAAI,EAAJA;AAAT,aATe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAYA,eAAeL,UAAU,CAACG,KAAD,CAAzB","sourcesContent":["import { NextPage } from 'next';\n// import { useQuery } from '@apollo/react-hooks'\n// import { NetworkStatus } from 'apollo-client'\nimport gql from 'graphql-tag'\nimport { get } from 'lodash';\n// import { RichText } from 'prismic-reactjs';\n\nimport { withApollo } from '../lib/apollo';\nimport Header from '../components/header';\n\nexport const PAGE_QUERY = gql`\n query pageQuery($uid: String!, $lang: String!) {\n  page(uid: $uid, lang: $lang) {\n    title\n    body {\n      ...on PageBodyWorks {\n        fields {\n          work {\n            __typename\n            ...on Work {\n              title\n              theme\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst Index: NextPage<{ title?: string, body: any[] }> = ({ title = '', body = [] }) => {\n  // const { data } = useQuery(ABOUT_QUERY)\n\n  // const title = get(data, 'allAbouts.edges.0.node.title.0.text', '') as string;\n\n  return <div>\n    <Header />\n    <h1>{title}</h1>\n    {body.map(({ fields }) => {\n      fields.map(({ work, __typename }: { work: object, __typename: string }) => {\n        if (__typename === 'PageBodyWorksFields') {\n          console.log(work)\n          return <div key={get(work, 'theme')}>\n            {get(work, 'title.text')}\n          </div>\n        }\n      })\n    })}\n  </div>;\n};\n\nIndex.getInitialProps = async ({ apolloClient }: any) => {\n  const { data } = await apolloClient.query({\n    query: PAGE_QUERY,\n    variables: { uid: 'index', lang: 'ru' }\n  })\n\n  const title = get(data, 'page.title.0.text', '') as string;\n  const body = get(data, 'page.body', []) as any[];\n\n  return { title, body };\n};\n\nexport default withApollo(Index);"]},"metadata":{},"sourceType":"module"}