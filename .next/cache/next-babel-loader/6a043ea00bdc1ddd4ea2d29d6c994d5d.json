{"ast":null,"code":"var _jsxFileName = \"/Users/alexeiaccio/Github/next-ts/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import { useQuery } from '@apollo/react-hooks'\n// import { NetworkStatus } from 'apollo-client'\nimport gql from 'graphql-tag';\nimport { get } from 'lodash'; // import { RichText } from 'prismic-reactjs';\n\nimport { withApollo } from '../lib/apollo';\nimport Header from '../components/header';\nexport const PAGE_QUERY = gql`\n query pageQuery($uid: String!, $lang: String!) {\n  page(uid: $uid, lang: $lang) {\n    title\n    body {\n      ...on PageBodyWorks {\n        fields {\n          work {\n            __typename\n            ...on Work {\n              title\n              theme\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst Index = ({\n  title = '',\n  body = []\n}) => {\n  // const { data } = useQuery(ABOUT_QUERY)\n  // const title = get(data, 'allAbouts.edges.0.node.title.0.text', '') as string;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, title), body.map(item => {\n    if (item.__typename === 'PageBodyWorks') {\n      return __jsx(\"div\", {\n        key: get(item, 'fields.0.work.theme'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, get(item, 'fields.0.work.title.text'));\n    }\n  }));\n};\n\nIndex.getInitialProps = async ({\n  apolloClient\n}) => {\n  const {\n    data\n  } = await apolloClient.query({\n    query: PAGE_QUERY,\n    variables: {\n      uid: 'index',\n      lang: 'ru'\n    }\n  });\n  const title = get(data, 'page.title.0.text', '');\n  const body = get(data, 'page.body', []);\n  return {\n    title,\n    body\n  };\n};\n\nexport default withApollo(Index);","map":{"version":3,"sources":["/Users/alexeiaccio/Github/next-ts/pages/index.tsx"],"names":["gql","get","withApollo","Header","PAGE_QUERY","Index","title","body","map","item","__typename","getInitialProps","apolloClient","data","query","variables","uid","lang"],"mappings":";;;AACA;AACA;AACA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,GAAT,QAAoB,QAApB,C,CACA;;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,OAAO,MAAMC,UAAU,GAAGJ,GAAI;;;;;;;;;;;;;;;;;;;CAAvB;;AAqBP,MAAMK,KAAgD,GAAG,CAAC;AAAEC,EAAAA,KAAK,GAAG,EAAV;AAAcC,EAAAA,IAAI,GAAG;AAArB,CAAD,KAA+B;AACtF;AAEA;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAL,CAFK,EAGJC,IAAI,CAACC,GAAL,CAASC,IAAI,IAAI;AAChB,QAAIA,IAAI,CAACC,UAAL,KAAoB,eAAxB,EAAyC;AACvC,aAAO;AAAK,QAAA,GAAG,EAAET,GAAG,CAACQ,IAAD,EAAO,qBAAP,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJR,GAAG,CAACQ,IAAD,EAAO,0BAAP,CADC,CAAP;AAGD;AACF,GANA,CAHI,CAAP;AAWD,CAhBD;;AAkBAJ,KAAK,CAACM,eAAN,GAAwB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAiC;AACvD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMD,YAAY,CAACE,KAAb,CAAmB;AACxCA,IAAAA,KAAK,EAAEV,UADiC;AAExCW,IAAAA,SAAS,EAAE;AAAEC,MAAAA,GAAG,EAAE,OAAP;AAAgBC,MAAAA,IAAI,EAAE;AAAtB;AAF6B,GAAnB,CAAvB;AAKA,QAAMX,KAAK,GAAGL,GAAG,CAACY,IAAD,EAAO,mBAAP,EAA4B,EAA5B,CAAjB;AACA,QAAMN,IAAI,GAAGN,GAAG,CAACY,IAAD,EAAO,WAAP,EAAoB,EAApB,CAAhB;AAEA,SAAO;AAAEP,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD,CAVD;;AAYA,eAAeL,UAAU,CAACG,KAAD,CAAzB","sourcesContent":["import { NextPage } from 'next';\n// import { useQuery } from '@apollo/react-hooks'\n// import { NetworkStatus } from 'apollo-client'\nimport gql from 'graphql-tag'\nimport { get } from 'lodash';\n// import { RichText } from 'prismic-reactjs';\n\nimport { withApollo } from '../lib/apollo';\nimport Header from '../components/header';\n\nexport const PAGE_QUERY = gql`\n query pageQuery($uid: String!, $lang: String!) {\n  page(uid: $uid, lang: $lang) {\n    title\n    body {\n      ...on PageBodyWorks {\n        fields {\n          work {\n            __typename\n            ...on Work {\n              title\n              theme\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst Index: NextPage<{ title?: string, body: any[] }> = ({ title = '', body = [] }) => {\n  // const { data } = useQuery(ABOUT_QUERY)\n\n  // const title = get(data, 'allAbouts.edges.0.node.title.0.text', '') as string;\n\n  return <div>\n    <Header />\n    <h1>{title}</h1>\n    {body.map(item => {\n      if (item.__typename === 'PageBodyWorks') {\n        return <div key={get(item, 'fields.0.work.theme')}>\n          {get(item, 'fields.0.work.title.text')}\n        </div>\n      }\n    })}\n  </div>;\n};\n\nIndex.getInitialProps = async ({ apolloClient }: any) => {\n  const { data } = await apolloClient.query({\n    query: PAGE_QUERY,\n    variables: { uid: 'index', lang: 'ru' }\n  })\n\n  const title = get(data, 'page.title.0.text', '') as string;\n  const body = get(data, 'page.body', []) as any[];\n\n  return { title, body };\n};\n\nexport default withApollo(Index);"]},"metadata":{},"sourceType":"module"}